---
test:
  name: delete-asset-ramp-couchDB
  description: This is a duration based benchmark targeting a Hyperledger Fabric network with a CouchDB world state database using the `fixed-asset` NodeJS chaincode contract that is interacted with via
    a Fabric-SDK-Node Gateway. Each test round invokes the 'deleteAsset' method. Successive rounds delete a-priori created assets of larger bytesize.
  workers:
    type: local
    number: 5
  rounds:
  - label: delete-asset-100
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAsset`. This method performs a deleteState on an item that matches an asset of size 100 bytes.
    chaincodeId: fixed-asset
    txNumber: 2000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10, startingTps: 10} }
    arguments:
      create_sizes: [100,1000,2000,4000,8000,16000,32000,64000]
      assets: 2000
      bytesize: 100
      consensus: true
    callback: benchmarks/api/fabric/lib/delete-asset.js
  - label: delete-asset-1000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAsset`. This method performs a deleteState on an item that matches an asset of size 1000 bytes.
    chaincodeId: fixed-asset
    txNumber: 2000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10, startingTps: 10} }
    arguments:
      nosetup: true
      assets: 2000
      bytesize: 1000
      consensus: true
    callback: benchmarks/api/fabric/lib/delete-asset.js
  - label: delete-asset-2000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAsset`. This method performs a deleteState on an item that matches an asset of size 2000 bytes.
    chaincodeId: fixed-asset
    txNumber: 2000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10, startingTps: 10} }
    arguments:
      nosetup: true
      bytesize: 2000
      assets: 2000
      consensus: true
    callback: benchmarks/api/fabric/lib/delete-asset.js
  - label: delete-asset-4000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAsset`. This method performs a deleteState on an item that matches an asset of size 4000 bytes.
    chaincodeId: fixed-asset
    txNumber: 2000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10, startingTps: 10} }
    arguments:
      nosetup: true
      bytesize: 4000
      assets: 2000
      consensus: true
    callback: benchmarks/api/fabric/lib/delete-asset.js
  - label: delete-asset-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAsset`. This method performs a deleteState on an item that matches an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 2000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10, startingTps: 10} }
    arguments:
      nosetup: true
      bytesize: 8000
      assets: 2000
      consensus: true
    callback: benchmarks/api/fabric/lib/delete-asset.js
  - label: delete-asset-16000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAsset`. This method performs a deleteState on an item that matches an asset of size 16000 bytes.
    chaincodeId: fixed-asset
    txNumber: 2000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10, startingTps: 10} }
    arguments:
      nosetup: true
      bytesize: 16000
      assets: 2000
      consensus: true
    callback: benchmarks/api/fabric/lib/delete-asset.js
  - label: delete-asset-32000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAsset`. This method performs a deleteState on an item that matches an asset of size 32000 bytes.
    chaincodeId: fixed-asset
    txNumber: 2000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10, startingTps: 10} }
    arguments:
      nosetup: true
      bytesize: 32000
      assets: 2000
      consensus: true
    callback: benchmarks/api/fabric/lib/delete-asset.js
  - label: delete-asset-64000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAsset`. This method performs a deleteState on an item that matches an asset of size 64000 bytes.
    chaincodeId: fixed-asset
    txNumber: 2000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10, startingTps: 10} }
    arguments:
      nosetup: true
      bytesize: 64000
      assets: 2000
      consensus: true
    callback: benchmarks/api/fabric/lib/delete-asset.js
  - label: delete-asset-8000-fixed-tps
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAsset`. This method performs a deleteState on an item that matches an asset of size 8000 bytes at a fixed TPS.
    chaincodeId: fixed-asset
    txNumber: 2000
    rateControl: { type: fixed-rate, opts: { tps: 350 }}
    arguments:
      nosetup: true
      bytesize: 8000
      assets: 2000
      consensus: true
    callback: benchmarks/api/fabric/lib/delete-asset.js
monitor:
  interval: 5
  type: ['process', 'docker']
  process:
    processes: [{ command: 'node', arguments: 'fabricClientWorker.js', multiOutput: 'avg' }]
  docker:
    containers: ['all']
observer:
  type: local
  interval: 30
