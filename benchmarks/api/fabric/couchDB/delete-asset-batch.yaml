---
test:
  name: delete-asset-batch-couchDB
  description: This is a duration based benchmark targeting a Hyperledger Fabric network with a CouchDB world state database using the `fixed-asset` NodeJS chaincode contract that is interacted with via
    a Fabric-SDK-Node Gateway. Each test round invokes the `deleteAssetsFromBatch` API method. Successive rounds delete a-priori created assets of larger byte size.
  workers:
    type: local
    number: 5
  rounds:
  - label: delete-asset-batch-1-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 1 UUID that matches an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 5000 # max number = workers.number*(arguments.assets/assets.bytesize)
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 100, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 1000
      bytesize: 8000
      batchsize: 1
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-10-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 10 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 5000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 80, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 10000
      bytesize: 8000
      batchsize: 10
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-20-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 20 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 5000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 50, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 20000
      bytesize: 8000
      batchsize: 20
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-30-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 30 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 5000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 40, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 30000
      bytesize: 8000
      batchsize: 30
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-40-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 40 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 5000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 30, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 40000
      bytesize: 8000
      batchsize: 40
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-50-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 50 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txNumber: 5000
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 20, startingTps: 10} }
    arguments:
      create_sizes: [8000]
      assets: 50000
      bytesize: 8000
      batchsize: 50
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
  - label: delete-asset-batch-20-8000-fixed-tps
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This method performs a deleteState on a batch of 20 UUIDs that each match an asset of size 8000 bytes at a fixed TPS.
    chaincodeId: fixed-asset
    txNumber: 5000
    rateControl: { type: fixed-rate, opts: { tps: 30 }}
    arguments:
      create_sizes: [8000]
      assets: 20000
      bytesize: 8000
      batchsize: 20
      consensus: true
    callback: benchmarks/api/fabric/lib/batch-delete-asset.js
monitor:
  interval: 5
  type: ['process', 'docker']
  process:
    processes: [{ command: 'node', arguments: 'fabricClientWorker.js', multiOutput: 'avg' }]
  docker:
    containers: ['all']
observer:
  type: local
  interval: 30
